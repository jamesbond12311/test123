import net.runelite.api.*
import net.runelite.api.coords.LocalPoint
import net.runelite.api.coords.WorldArea
import net.runelite.api.coords.WorldPoint
import net.runelite.api.events.GameTick
import net.runelite.api.events.NpcSpawned
import net.runelite.client.eventbus.Subscribe
import net.runelite.client.plugins.Plugin
import net.runelite.client.plugins.PluginDescriptor
import net.runelite.client.ui.overlay.Overlay
import net.runelite.client.ui.overlay.OverlayMenuEntry
import net.runelite.client.ui.overlay.OverlayPosition
import net.runelite.client.ui.overlay.OverlayPriority
import net.runelite.client.ui.overlay.tooltip.Tooltip
import net.runelite.client.ui.overlay.tooltip.TooltipManager
import net.runelite.client.util.ImageUtil
import org.pf4j.Extension
import java.awt.Color
import java.awt.Dimension
import java.awt.Graphics2D
import java.awt.image.BufferedImage
import java.time.Duration
import java.time.Instant
import javax.inject.Inject

@Extension
@PluginDescriptor(
    name = "Pest Control Auto",
    description = "Automatically does pest control on the Meteor OSRS client",
    enabledByDefault = false
)
class PestControlAutoPlugin : Plugin()
{
    // The NPC IDs for the void knights and the pest monsters
    private val VOID_KNIGHT_NPC_IDS = arrayOf(3782, 3784, 3785, 3786, 3787, 3788, 3789)
    private val PEST_MONSTER_NPC_IDS = arrayOf(3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808)
    // The game object ID for the pest control gates
    private val PEST_CONTROL_GATE_ID = 2360

    // The location of the void knight on the novice boat
    private val VOID_KNIGHT_LOCATION = WorldPoint(2657, 2639, 0)
    // The area that the pest control game takes place in
    private val PEST_CONTROL_AREA = WorldArea(2624, 2592, 2690, 2658, 0
// A command to start the pest control plugin
private val CMD_START = "start"

// The state of the plugin
private var started = false

// The state of the game
private var inGame = false
private var atVoidKnight = false
private var atGates = false

// The current pest control game
private var game: Game? = null

@Inject
private lateinit var client: Client

@Inject
private lateinit var commandDispatcher: CommandDispatcher<MutableMap<String, Any>>

@Inject
private lateinit var tooltipManager: TooltipManager

@Inject
private lateinit var overlayManager: OverlayManager

private val pestControlOverlay = PestControlOverlay()

// Registers the command to start the plugin
override fun startUp()
{
    val root = commandDispatcher.register(
        LiteralCommandNode(CMD_START)
    )
    commandDispatcher.register(
        LiteralCommandNode(CMD_START)
            .redirect(root)
    )
}

// Unregisters the command when the plugin is stopped
override fun shutDown()
{
    commandDispatcher.getRoot().removeCommand(CMD_START)
}

@Subscribe
fun onGameTick(event: GameTick)
{
    if (!started)
    {
        return
    }

    val player = client.localPlayer
    if (player == null)
    {
        return
    }

    val worldLocation = player.worldLocation
    if (!PEST_CONTROL_AREA.contains(worldLocation))
    {
        if (inGame)
        {
            game = null
            inGame = false
            atVoidKnight = false
            atGates = false
        }
        return
    }

    if (!inGame)
    {
        game = Game(Duration.ofMinutes(10))
        inGame = true
    }

    val npcs = client.npcs
    val gates = client.gameObjects

    atVoidKnight = npcs.any { VOID_KNIGHT_NPC_IDS.contains(it.id) && it.interacting == player }
    atGates = gates.any { it.id == PEST_CONTROL_GATE_ID && it.worldLocation == player.worldLocation }

    if (atVoidKnight)
    {
        val voidKnight = npcs.first { it.interacting == player }
        if (voidKnight.healthRatio == 0)
        {
            game?.addVictory()
        }
        else
        {
            game?.addDefeat()
        }
        game = null
        inGame = false
        atVoidKnight = false
        atGates = false
    }
    else if (atGates)
    {
        game?.addDefeat()
        game = null
        inGame = false
        atVoidKnight = false
        atGates = false
    }
    else
    {
        if (worldLocation.distanceTo(VOID_KNIGHT_LOCATION) > 32)
        {
            walk
toVoidKnight()
        }
        else
        {
            attackPests()
        }
    }
}

@Subscribe
fun onNpcSpawned(event: NpcSpawned)
{
    val npc = event.npc
    if (PEST_MONSTER_NPC_IDS.contains(npc.id))
    {
        attackPest(npc)
    }
}

private fun attackPest(npc: Npc)
{
    val player = client.localPlayer
    if (player == null || !atVoidKnight)
    {
        return
    }

    val target = npc.interacting
    if (target != null && target != player)
    {
        return
    }

    client.setNPCId(npc.index)
    player.setInteracting(npc, false)
}

private fun attackPests()
{
    val player = client.localPlayer ?: return
    val npcs = client.npcs
    for (npc in npcs)
    {
        if (PEST_MONSTER_NPC_IDS.contains(npc.id))
        {
            val target = npc.interacting
            if (target == null || target == player)
            {
                attackPest(npc)
                return
            }
        }
    }
}

private fun walkToVoidKnight()
{
    val player = client.localPlayer ?: return
    val worldLocation = player.worldLocation
    if (worldLocation.distanceTo(VOID_KNIGHT_LOCATION) > 32)
    {
        val path = client.findPath(player, VOID_KNIGHT_LOCATION)
        if (path != null)
        {
            path.step()
        }
    }
}

private inner class PestControlOverlay : Overlay()
{
    private val voidKnightImage: BufferedImage = ImageUtil.getResourceStreamFromClass(javaClass, "void_knight.png")
    private val gatesImage: BufferedImage = ImageUtil.getResourceStreamFromClass(javaClass, "gates.png")

    init
    {
        setPosition(OverlayPosition.DYNAMIC)
        setPriority(OverlayPriority.HIGH)
    }

    override fun getPreferredSize(): Dimension = Dimension(0, 0)

    override fun render(graphics: Graphics2D)
    {
        if (!started)
        {
            return
        }

        val player = client.localPlayer
        if (player == null)
        {
            return
        }

        val worldLocation = player.worldLocation
        if (!PEST_CONTROL_AREA.contains(worldLocation))
        {
            return
        }

        val voidKnightLocation = LocalPoint(VOID_KNIGHT_LOCATION.x, VOID_KNIGHT_LOCATION.y)
        val voidKnightPoint = perspective.localToCanvas(voidKnightLocation, client.plane, VOID_KNIGHT_LOCATION.z)
        if (voidKnightPoint != null)
        {
            if (atVoidKnight)
            {
               
graphics.color = Color.GREEN
            }
            else
            {
                graphics.color = Color.RED
            }
            graphics.drawImage(voidKnightImage, voidKnightPoint.x - voidKnightImage.width / 2, voidKnightPoint.y - voidKnightImage.height / 2, null)
        }

        if (atGates)
        {
            val gatesPoint = perspective.localToCanvas(player.localLocation, client.plane, player.z)
            if (gatesPoint != null)
            {
                graphics.color = Color.GREEN
                graphics.drawImage(gatesImage, gatesPoint.x - gatesImage.width / 2, gatesPoint.y - gatesImage.height / 2, null)
            }
        }
    }

    override fun onMouseHover(event: MouseHoverEvent)
    {
        val player = client.localPlayer
        if (player == null)
        {
            return
        }

        val worldLocation = player.worldLocation
        if (!PEST_CONTROL_AREA.contains(worldLocation))
        {
            return
        }

        if (event.matches(voidKnightImage))
        {
            val voidKnightLocation = LocalPoint(VOID_KNIGHT_LOCATION.x, VOID_KNIGHT_LOCATION.y)
            val voidKnightPoint = perspective.localToCanvas(voidKnightLocation, client.plane, VOID_KNIGHT_LOCATION.z)
            if (voidKnightPoint != null)
            {
                val builder = StringBuilder()
                builder.append("Void Knight")
                if (atVoidKnight)
                {
                    builder.append(" (attacking)")
                }
                builder.append("<br>")
                builder.append("Victories: ").append(game?.victories ?: 0).append("<br>")
                builder.append("Defeats: ").append(game?.defeats ?: 0).append("<br>")
                if (game != null)
                {
                    builder.append("Time remaining: ").append(game!!.timeRemaining.toMinutes()).append(" minutes")
                }
                val tooltip = Tooltip(builder.toString())
                tooltipManager.add(tooltip)
            }
        }
        else if (event.matches(gatesImage))
        {
            val gatesPoint = perspective.localToCanvas(player.localLocation, client.plane, player.z)
            if (gatesPoint != null)
            {
                val builder = StringBuilder()
                builder.append("Gates")
                builder.append("<br>")
                builder.append("Victories: ").append(game?.victories ?: 0).append("<br>")
                builder.append("Defeats: ").append(game?.defeats ?: 0).append("<br>")
                if (game != null)
                {
                    builder.append("Time remaining: ").append(game!!.timeRemaining.toMinutes()).append(" minutes")
                }
                val tooltip = Tooltip(builder.toString())
                tooltipManager.add(tooltip)
            }
     

override fun onClick(event: MouseClickEvent)
    {
        val player = client.localPlayer
        if (player == null)
        {
            return
        }

        val worldLocation = player.worldLocation
        if (!PEST_CONTROL_AREA.contains(worldLocation))
        {
            return
        }

        if (event.matches(voidKnightImage))
        {
            attackPests()
        }
    }

    override fun onMouseLeave()
    {
        tooltipManager.clear()
    }
}

private class Game(val duration: Duration)
{
    var victories = 0
    var defeats = 0
    val startTime = Instant.now()

    val timeRemaining: Duration
        get()
        {
            val elapsed = Duration.between(startTime, Instant.now())
            return duration.minus(elapsed)
        }

    fun addVictory()
    {
        victories++
    }

    fun addDefeat()
    {
        defeats++
    }
}

companion object
{
    private val EXCEPTION_INVALID_STATE = SimpleCommandExceptionType(MessageDescriptor.of("You must be in the pest control area to use this command"))

    @Throws(CommandSyntaxException::class)
    fun start(context: CommandContext<MutableMap<String, Any>>): Int
    {
        val plugin = context.getArgument("plugin", PestControlAutoPlugin::class.java)
        if (plugin.inGame)
        {
            throw EXCEPTION_INVALID_STATE.create()
        }
        plugin.started = true
        plugin.overlayManager.add(plugin.pestControlOverlay)
        return 1
    }

    fun stop(context: CommandContext<MutableMap<String, Any>>): Int
    {
        val plugin = context.getArgument("plugin", PestControlAutoPlugin::class.java)
        plugin.started = false
        plugin.overlayManager.remove(plugin.pestControlOverlay)
        return 1
    }

    fun getSuggestions(context: CommandContext<MutableMap<String, Any>>, builder: SuggestionsBuilder): Suggestions
    {
        val plugin = context.getArgument("plugin", PestControlAutoPlugin::class.java)
        if (!context.getNod...
